{"version":3,"sources":["../node_modules/body-scroll-lock/lib/bodyScrollLock.min.js","../node_modules/@iconfu/svg-inject/dist/svg-inject.js","../node_modules/lodash.debounce/index.js","js/main.js"],"names":["bodyScrollLock","require","disableBodyScroll","window","SVGInject","debounce","document","querySelectorAll","forEach","img","tl","lastTouchY","main","querySelector","mainCopy","scrollDown","isActive","TimelineLite","set","body","scrollTo","to","ease","Power2","easeInOut","offsetTop","scrollUp","onload","TweenLite","addEventListener","e","touches","clientY","leading","maxWait"],"mappings":"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","file":"main.0115c2aa.js","sourceRoot":"..\\src","sourcesContent":["!function(e,t){if(\"function\"==typeof define&&define.amd)define([\"exports\"],t);else if(\"undefined\"!=typeof exports)t(exports);else{var o={};t(o),e.bodyScrollLock=o}}(this,function(exports){\"use strict\";function r(e){if(Array.isArray(e)){for(var t=0,o=Array(e.length);t<e.length;t++)o[t]=e[t];return o}return Array.from(e)}Object.defineProperty(exports,\"__esModule\",{value:!0});var l=!1;if(\"undefined\"!=typeof window){var e={get passive(){l=!0}};window.addEventListener(\"testPassive\",null,e),window.removeEventListener(\"testPassive\",null,e)}var d=\"undefined\"!=typeof window&&window.navigator&&window.navigator.platform&&/iP(ad|hone|od)/.test(window.navigator.platform),c=[],u=!1,a=-1,s=void 0,v=void 0,f=function(t){return c.some(function(e){return!(!e.options.allowTouchMove||!e.options.allowTouchMove(t))})},m=function(e){var t=e||window.event;return!!f(t.target)||(1<t.touches.length||(t.preventDefault&&t.preventDefault(),!1))},o=function(){setTimeout(function(){void 0!==v&&(document.body.style.paddingRight=v,v=void 0),void 0!==s&&(document.body.style.overflow=s,s=void 0)})};exports.disableBodyScroll=function(i,e){if(d){if(!i)return void console.error(\"disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.\");if(i&&!c.some(function(e){return e.targetElement===i})){var t={targetElement:i,options:e||{}};c=[].concat(r(c),[t]),i.ontouchstart=function(e){1===e.targetTouches.length&&(a=e.targetTouches[0].clientY)},i.ontouchmove=function(e){var t,o,n,r;1===e.targetTouches.length&&(o=i,r=(t=e).targetTouches[0].clientY-a,!f(t.target)&&(o&&0===o.scrollTop&&0<r?m(t):(n=o)&&n.scrollHeight-n.scrollTop<=n.clientHeight&&r<0?m(t):t.stopPropagation()))},u||(document.addEventListener(\"touchmove\",m,l?{passive:!1}:void 0),u=!0)}}else{n=e,setTimeout(function(){if(void 0===v){var e=!!n&&!0===n.reserveScrollBarGap,t=window.innerWidth-document.documentElement.clientWidth;e&&0<t&&(v=document.body.style.paddingRight,document.body.style.paddingRight=t+\"px\")}void 0===s&&(s=document.body.style.overflow,document.body.style.overflow=\"hidden\")});var o={targetElement:i,options:e||{}};c=[].concat(r(c),[o])}var n},exports.clearAllBodyScrollLocks=function(){d?(c.forEach(function(e){e.targetElement.ontouchstart=null,e.targetElement.ontouchmove=null}),u&&(document.removeEventListener(\"touchmove\",m,l?{passive:!1}:void 0),u=!1),c=[],a=-1):(o(),c=[])},exports.enableBodyScroll=function(t){if(d){if(!t)return void console.error(\"enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.\");t.ontouchstart=null,t.ontouchmove=null,c=c.filter(function(e){return e.targetElement!==t}),u&&0===c.length&&(document.removeEventListener(\"touchmove\",m,l?{passive:!1}:void 0),u=!1)}else(c=c.filter(function(e){return e.targetElement!==t})).length||o()}});\n","/**\n * SVGInject - Version 1.2.3\n * A tiny, intuitive, robust, caching solution for injecting SVG files inline into the DOM.\n *\n * https://github.com/iconfu/svg-inject\n *\n * Copyright (c) 2018 INCORS, the creators of iconfu.com\n * @license MIT License - https://github.com/iconfu/svg-inject/blob/master/LICENSE\n */\n\n(function(window, document) {\n  // constants for better minification\n  var _CREATE_ELEMENT_ = 'createElement';\n  var _GET_ELEMENTS_BY_TAG_NAME_ = 'getElementsByTagName';\n  var _LENGTH_ = 'length';\n  var _STYLE_ = 'style';\n  var _TITLE_ = 'title';\n  var _UNDEFINED_ = 'undefined';\n  var _SET_ATTRIBUTE_ = 'setAttribute';\n  var _GET_ATTRIBUTE_ = 'getAttribute';\n\n  var NULL = null;\n\n  // constants\n  var __SVGINJECT = '__svgInject';\n  var ID_SUFFIX = '--inject-';\n  var ID_SUFFIX_REGEX = new RegExp(ID_SUFFIX + '\\\\d+', \"g\");\n  var LOAD_FAIL = 'LOAD_FAIL';\n  var SVG_NOT_SUPPORTED = 'SVG_NOT_SUPPORTED';\n  var SVG_INVALID = 'SVG_INVALID';\n  var ATTRIBUTE_EXCLUSION_NAMES = ['src', 'alt', 'onload', 'onerror'];\n  var A_ELEMENT = document[_CREATE_ELEMENT_]('a');\n  var IS_SVG_SUPPORTED = typeof SVGRect != _UNDEFINED_;\n  var DEFAULT_OPTIONS = {\n    useCache: true,\n    copyAttributes: true,\n    makeIdsUnique: true\n  };\n  // Map of IRI referenceable tag names to properties that can reference them. This is defined in\n  // https://www.w3.org/TR/SVG11/linking.html#processingIRI\n  var IRI_TAG_PROPERTIES_MAP = {\n    clipPath: ['clip-path'],\n    'color-profile': NULL,\n    cursor: NULL,\n    filter: NULL,\n    linearGradient: ['fill', 'stroke'],\n    marker: ['marker', 'marker-end', 'marker-mid', 'marker-start'],\n    mask: NULL,\n    pattern: ['fill', 'stroke'],\n    radialGradient: ['fill', 'stroke']\n  };\n  var INJECTED = 1;\n  var FAIL = 2;\n\n  var uniqueIdCounter = 1;\n  var xmlSerializer;\n  var domParser;\n\n\n  // creates an SVG document from an SVG string\n  function svgStringToSvgDoc(svgStr) {\n    domParser = domParser || new DOMParser();\n    return domParser.parseFromString(svgStr, 'text/xml');\n  }\n\n\n  // searializes an SVG element to an SVG string\n  function svgElemToSvgString(svgElement) {\n    xmlSerializer = xmlSerializer || new XMLSerializer();\n    return xmlSerializer.serializeToString(svgElement);\n  }\n\n\n  // Returns the absolute url for the specified url\n  function getAbsoluteUrl(url) {\n    A_ELEMENT.href = url;\n    return A_ELEMENT.href;\n  }\n\n\n  // Load svg with an XHR request\n  function loadSvg(url, callback, errorCallback) {\n    if (url) {\n      var req = new XMLHttpRequest();\n      req.onreadystatechange = function() {\n        if (req.readyState == 4) {\n          // readyState is DONE\n          var status = req.status;\n          if (status == 200) {\n            // request status is OK\n            callback(req.responseXML, req.responseText.trim());\n          } else if (status >= 400) {\n            // request status is error (4xx or 5xx)\n            errorCallback();\n          } else if (status == 0) {\n            // request status 0 can indicate a failed cross-domain call\n            errorCallback();\n          }\n        }\n      };\n      req.open('GET', url, true);\n      req.send();\n    }\n  }\n\n\n  // Copy attributes from img element to svg element\n  function copyAttributes(imgElem, svgElem) {\n    var attribute;\n    var attributeName;\n    var attributeValue;\n    var attributes = imgElem.attributes;\n    for (var i = 0; i < attributes[_LENGTH_]; i++) {\n      attribute = attributes[i];\n      attributeName = attribute.name;\n      // Only copy attributes not explicitly excluded from copying\n      if (ATTRIBUTE_EXCLUSION_NAMES.indexOf(attributeName) == -1) {\n        attributeValue = attribute.value;\n        // If img attribute is \"title\", insert a title element into SVG element\n        if (attributeName == _TITLE_) {\n          var titleElem;\n          var firstElementChild = svgElem.firstElementChild;\n          if (firstElementChild && firstElementChild.localName.toLowerCase() == _TITLE_) {\n            // If the SVG element's first child is a title element, keep it as the title element\n            titleElem = firstElementChild;\n          } else {\n            // If the SVG element's first child element is not a title element, create a new title\n            // ele,emt and set it as the first child\n            titleElem = document[_CREATE_ELEMENT_ + 'NS']('http://www.w3.org/2000/svg', _TITLE_);\n            svgElem.insertBefore(titleElem, firstElementChild);\n          }\n          // Set new title content\n          titleElem.textContent = attributeValue;\n        } else {\n          // Set img attribute to svg element\n          svgElem[_SET_ATTRIBUTE_](attributeName, attributeValue);\n        }\n      }\n    }\n  }\n\n\n  // This function appends a suffix to IDs of referenced elements in the <defs> in order to  to avoid ID collision\n  // between multiple injected SVGs. The suffix has the form \"--inject-X\", where X is a running number which is\n  // incremented with each injection. References to the IDs are adjusted accordingly.\n  // We assume tha all IDs within the injected SVG are unique, therefore the same suffix can be used for all IDs of one\n  // injected SVG.\n  // If the onlyReferenced argument is set to true, only those IDs will be made unique that are referenced from within the SVG\n  function makeIdsUnique(svgElem, onlyReferenced) {\n    var idSuffix = ID_SUFFIX + uniqueIdCounter++;\n    // Regular expression for functional notations of an IRI references. This will find occurences in the form\n    // url(#anyId) or url(\"#anyId\") (for Internet Explorer) and capture the referenced ID\n    var funcIriRegex = /url\\(\"?#([a-zA-Z][\\w:.-]*)\"?\\)/g;\n    // Get all elements with an ID. The SVG spec recommends to put referenced elements inside <defs> elements, but\n    // this is not a requirement, therefore we have to search for IDs in the whole SVG.\n    var idElements = svgElem.querySelectorAll('[id]');\n    var idElem;\n    // An object containing referenced IDs  as keys is used if only referenced IDs should be uniquified.\n    // If this object does not exist, all IDs will be uniquified.\n    var referencedIds = onlyReferenced ? [] : NULL;\n    var tagName;\n    var iriTagNames = {};\n    var iriProperties = [];\n    var changed = false;\n    var i, j;\n\n    if (idElements[_LENGTH_]) {\n      // Make all IDs unique by adding the ID suffix and collect all encountered tag names\n      // that are IRI referenceable from properities.\n      for (i = 0; i < idElements[_LENGTH_]; i++) {\n        tagName = idElements[i].localName; // Use non-namespaced tag name\n        // Make ID unique if tag name is IRI referenceable\n        if (tagName in IRI_TAG_PROPERTIES_MAP) {\n          iriTagNames[tagName] = 1;\n        }\n      }\n      // Get all properties that are mapped to the found IRI referenceable tags\n      for (tagName in iriTagNames) {\n        (IRI_TAG_PROPERTIES_MAP[tagName] || [tagName]).forEach(function (mappedProperty) {\n          // Add mapped properties to array of iri referencing properties.\n          // Use linear search here because the number of possible entries is very small (maximum 11)\n          if (iriProperties.indexOf(mappedProperty) < 0) {\n            iriProperties.push(mappedProperty);\n          }\n        });\n      }\n      if (iriProperties[_LENGTH_]) {\n        // Add \"style\" to properties, because it may contain references in the form 'style=\"fill:url(#myFill)\"'\n        iriProperties.push(_STYLE_);\n      }\n      // Run through all elements of the SVG and replace IDs in references.\n      // To get all descending elements, getElementsByTagName('*') seems to perform faster than querySelectorAll('*').\n      // Since svgElem.getElementsByTagName('*') does not return the svg element itself, we have to handle it separately.\n      var descElements = svgElem[_GET_ELEMENTS_BY_TAG_NAME_]('*');\n      var element = svgElem;\n      var propertyName;\n      var value;\n      var newValue;\n      for (i = -1; element != NULL;) {\n        if (element.localName == _STYLE_) {\n          // If element is a style element, replace IDs in all occurences of \"url(#anyId)\" in text content\n          value = element.textContent;\n          newValue = value && value.replace(funcIriRegex, function(match, id) {\n            if (referencedIds) {\n              referencedIds[id] = 1;\n            }\n            return 'url(#' + id + idSuffix + ')';\n          });\n          if (newValue !== value) {\n            element.textContent = newValue;\n          }\n        } else if (element.hasAttributes()) {\n          // Run through all property names for which IDs were found\n          for (j = 0; j < iriProperties[_LENGTH_]; j++) {\n            propertyName = iriProperties[j];\n            value = element[_GET_ATTRIBUTE_](propertyName);\n            newValue = value && value.replace(funcIriRegex, function(match, id) {\n              if (referencedIds) {\n                referencedIds[id] = 1;\n              }\n                return 'url(#' + id + idSuffix + ')';\n            });\n            if (newValue !== value) {\n              element[_SET_ATTRIBUTE_](propertyName, newValue);\n            }\n          }\n          // Replace IDs in xlink:ref and href attributes\n          ['xlink:href', 'href'].forEach(function(refAttrName) {\n            var iri = element[_GET_ATTRIBUTE_](refAttrName);\n            if (/^\\s*#/.test(iri)) { // Check if iri is non-null and internal reference\n              iri = iri.trim();\n              element[_SET_ATTRIBUTE_](refAttrName, iri + idSuffix);\n              if (referencedIds) {\n                // Add ID to referenced IDs\n                referencedIds[iri.substring(1)] = 1;\n              }\n            }\n          });\n        }\n        element = descElements[++i];\n      }\n      for (i = 0; i < idElements[_LENGTH_]; i++) {\n        idElem = idElements[i];\n        // If set of referenced IDs exists, make only referenced IDs unique,\n        // otherwise make all IDs unique.\n        if (!referencedIds || referencedIds[idElem.id]) {\n          // Add suffix to element's ID\n          idElem.id += idSuffix;\n          changed = true;\n        }\n      }\n    }\n    // return true if SVG element has changed\n    return changed;\n  }\n\n\n  // For cached SVGs the IDs are made unique by simply replacing the already inserted unique IDs with a\n  // higher ID counter. This is much more performant than a call to makeIdsUnique().\n  function makeIdsUniqueCached(svgString) {\n    return svgString.replace(ID_SUFFIX_REGEX, ID_SUFFIX + uniqueIdCounter++);\n  }\n\n\n  // Inject SVG by replacing the img element with the SVG element in the DOM\n  function inject(imgElem, svgElem, absUrl, options) {\n    if (svgElem) {\n      svgElem[_SET_ATTRIBUTE_]('data-inject-url', absUrl);\n      var parentNode = imgElem.parentNode;\n      if (parentNode) {\n        if (options.copyAttributes) {\n          copyAttributes(imgElem, svgElem);\n        }\n        // Invoke beforeInject hook if set\n        var beforeInject = options.beforeInject;\n        var injectElem = (beforeInject && beforeInject(imgElem, svgElem)) || svgElem;\n        // Replace img element with new element. This is the actual injection.\n        parentNode.replaceChild(injectElem, imgElem);\n        // Mark img element as injected\n        imgElem[__SVGINJECT] = INJECTED;\n        removeOnLoadAttribute(imgElem);\n        // Invoke afterInject hook if set\n        var afterInject = options.afterInject;\n        if (afterInject) {\n          afterInject(imgElem, injectElem);\n        }\n      }\n    } else {\n      svgInvalid(imgElem, options);\n    }\n  }\n\n\n  // Merges any number of options objects into a new object\n  function mergeOptions() {\n    var mergedOptions = {};\n    var args = arguments;\n    // Iterate over all specified options objects and add all properties to the new options object\n    for (var i = 0; i < args[_LENGTH_]; i++) {\n      var argument = args[i];\n        for (var key in argument) {\n          if (argument.hasOwnProperty(key)) {\n            mergedOptions[key] = argument[key];\n          }\n        }\n      }\n    return mergedOptions;\n  }\n\n\n  // Adds the specified CSS to the document's <head> element\n  function addStyleToHead(css) {\n    var head = document[_GET_ELEMENTS_BY_TAG_NAME_]('head')[0];\n    if (head) {\n      var style = document[_CREATE_ELEMENT_](_STYLE_);\n      style.type = 'text/css';\n      style.appendChild(document.createTextNode(css));\n      head.appendChild(style);\n    }\n  }\n\n\n  // Builds an SVG element from the specified SVG string\n  function buildSvgElement(svgStr, verify) {\n    if (verify) {\n      var svgDoc;\n      try {\n        // Parse the SVG string with DOMParser\n        svgDoc = svgStringToSvgDoc(svgStr);\n      } catch(e) {\n        return NULL;\n      }\n      if (svgDoc[_GET_ELEMENTS_BY_TAG_NAME_]('parsererror')[_LENGTH_]) {\n        // DOMParser does not throw an exception, but instead puts parsererror tags in the document\n        return NULL;\n      }\n      return svgDoc.documentElement;\n    } else {\n      var div = document.createElement('div');\n      div.innerHTML = svgStr;\n      return div.firstElementChild;\n    }\n  }\n\n\n  function removeOnLoadAttribute(imgElem) {\n    // Remove the onload attribute. Should only be used to remove the unstyled image flash protection and\n    // make the element visible, not for removing the event listener.\n    imgElem.removeAttribute('onload');\n  }\n\n\n  function errorMessage(msg) {\n    console.error('SVGInject: ' + msg);\n  }\n\n\n  function fail(imgElem, status, options) {\n    imgElem[__SVGINJECT] = FAIL;\n    if (options.onFail) {\n      options.onFail(imgElem, status);\n    } else {\n      errorMessage(status);\n    }\n  }\n\n\n  function svgInvalid(imgElem, options) {\n    removeOnLoadAttribute(imgElem);\n    fail(imgElem, SVG_INVALID, options);\n  }\n\n\n  function svgNotSupported(imgElem, options) {\n    removeOnLoadAttribute(imgElem);\n    fail(imgElem, SVG_NOT_SUPPORTED, options);\n  }\n\n\n  function loadFail(imgElem, options) {\n    fail(imgElem, LOAD_FAIL, options);\n  }\n\n\n  function removeEventListeners(imgElem) {\n    imgElem.onload = NULL;\n    imgElem.onerror = NULL;\n  }\n\n\n  function imgNotSet(msg) {\n    errorMessage('no img element');\n  }\n\n\n  function createSVGInject(globalName, options) {\n    var defaultOptions = mergeOptions(DEFAULT_OPTIONS, options);\n    var svgLoadCache = {};\n\n    if (IS_SVG_SUPPORTED) {\n      // If the browser supports SVG, add a small stylesheet that hides the <img> elements until\n      // injection is finished. This avoids showing the unstyled SVGs before style is applied.\n      addStyleToHead('img[onload^=\"' + globalName + '(\"]{visibility:hidden;}');\n    }\n\n\n    /**\n     * SVGInject\n     *\n     * Injects the SVG specified in the `src` attribute of the specified `img` element or array of `img`\n     * elements. Returns a Promise object which resolves if all passed in `img` elements have either been\n     * injected or failed to inject (Only if a global Promise object is available like in all modern browsers\n     * or through a polyfill).\n     *\n     * Options:\n     * useCache: If set to `true` the SVG will be cached using the absolute URL. Default value is `true`.\n     * copyAttributes: If set to `true` the attributes will be copied from `img` to `svg`. Dfault value\n     *     is `true`.\n     * makeIdsUnique: If set to `true` the ID of elements in the `<defs>` element that can be references by\n     *     property values (for example 'clipPath') are made unique by appending \"--inject-X\", where X is a\n     *     running number which increases with each injection. This is done to avoid duplicate IDs in the DOM.\n     * beforeLoad: Hook before SVG is loaded. The `img` element is passed as a parameter. If the hook returns\n     *     a string it is used as the URL instead of the `img` element's `src` attribute.\n     * afterLoad: Hook after SVG is loaded. The loaded `svg` element and `svg` string are passed as a\n     *     parameters. If caching is active this hook will only get called once for injected SVGs with the\n     *     same absolute path. Changes to the `svg` element in this hook will be applied to all injected SVGs\n     *     with the same absolute path. It's also possible to return an `svg` string or `svg` element which\n     *     will then be used for the injection.\n     * beforeInject: Hook before SVG is injected. The `img` and `svg` elements are passed as parameters. If\n     *     any html element is returned it gets injected instead of applying the default SVG injection.\n     * afterInject: Hook after SVG is injected. The `img` and `svg` elements are passed as parameters.\n     * onAllFinish: Hook after all `img` elements passed to an SVGInject() call have either been injected or\n     *     failed to inject.\n     * onFail: Hook after injection fails. The `img` element and a `status` string are passed as an parameter.\n     *     The `status` can be either `'SVG_NOT_SUPPORTED'` (the browser does not support SVG),\n     *     `'SVG_INVALID'` (the SVG is not in a valid format) or `'LOAD_FAILED'` (loading of the SVG failed).\n     *\n     * @param {HTMLImageElement} img - an img element or an array of img elements\n     * @param {Object} [options] - optional parameter with [options](#options) for this injection.\n     */\n    function SVGInject(img, options) {\n      options = mergeOptions(defaultOptions, options);\n\n      var run = function(resolve) {\n        var allFinish = function() {\n          var onAllFinish = options.onAllFinish;\n          if (onAllFinish) {\n            onAllFinish();\n          }\n          resolve && resolve();\n        };\n\n        if (img && typeof img[_LENGTH_] != _UNDEFINED_) {\n          // an array like structure of img elements\n          var injectIndex = 0;\n          var injectCount = img[_LENGTH_];\n\n          if (injectCount == 0) {\n            allFinish();\n          } else {\n            var finish = function() {\n              if (++injectIndex == injectCount) {\n                allFinish();\n              }\n            };\n\n            for (var i = 0; i < injectCount; i++) {\n              SVGInjectElement(img[i], options, finish);\n            }\n          }\n        } else {\n          // only one img element\n          SVGInjectElement(img, options, allFinish);\n        }\n      };\n\n      // return a Promise object if globally available\n      return typeof Promise == _UNDEFINED_ ? run() : new Promise(run);\n    }\n\n\n    // Injects a single svg element. Options must be already merged with the default options.\n    function SVGInjectElement(imgElem, options, callback) {\n      if (imgElem) {\n        var svgInjectAttributeValue = imgElem[__SVGINJECT];\n        if (!svgInjectAttributeValue) {\n          removeEventListeners(imgElem);\n\n          if (!IS_SVG_SUPPORTED) {\n            svgNotSupported(imgElem, options);\n            callback();\n            return;\n          }\n          // Invoke beforeLoad hook if set. If the beforeLoad returns a value use it as the src for the load\n          // URL path. Else use the imgElem's src attribute value.\n          var beforeLoad = options.beforeLoad;\n          var src = (beforeLoad && beforeLoad(imgElem)) || imgElem[_GET_ATTRIBUTE_]('src');\n\n          if (!src) {\n            // If no image src attribute is set do no injection. This can only be reached by using javascript\n            // because if no src attribute is set the onload and onerror events do not get called\n            if (src === '') {\n              loadFail(imgElem, options);\n            }\n            callback();\n            return;\n          }\n\n          // set array so later calls can register callbacks\n          var onFinishCallbacks = [];\n          imgElem[__SVGINJECT] = onFinishCallbacks;\n\n          var onFinish = function() {\n            callback();\n            onFinishCallbacks.forEach(function(onFinishCallback) {\n              onFinishCallback();\n            });\n          };\n\n          var absUrl = getAbsoluteUrl(src);\n          var useCacheOption = options.useCache;\n          var makeIdsUniqueOption = options.makeIdsUnique;\n          \n          var setSvgLoadCacheValue = function(val) {\n            if (useCacheOption) {\n              svgLoadCache[absUrl].forEach(function(svgLoad) {\n                svgLoad(val);\n              });\n              svgLoadCache[absUrl] = val;\n            }\n          };\n\n          if (useCacheOption) {\n            var svgLoad = svgLoadCache[absUrl];\n\n            var handleLoadValue = function(loadValue) {\n              if (loadValue === LOAD_FAIL) {\n                loadFail(imgElem, options);\n              } else if (loadValue === SVG_INVALID) {\n                svgInvalid(imgElem, options);\n              } else {\n                var hasUniqueIds = loadValue[0];\n                var svgString = loadValue[1];\n                var uniqueIdsSvgString = loadValue[2];\n                var svgElem;\n\n                if (makeIdsUniqueOption) {\n                  if (hasUniqueIds === NULL) {\n                    // IDs for the SVG string have not been made unique before. This may happen if previous\n                    // injection of a cached SVG have been run with the option makedIdsUnique set to false\n                    svgElem = buildSvgElement(svgString, false);\n                    hasUniqueIds = makeIdsUnique(svgElem, false);\n\n                    loadValue[0] = hasUniqueIds;\n                    loadValue[2] = hasUniqueIds && svgElemToSvgString(svgElem);\n                  } else if (hasUniqueIds) {\n                    // Make IDs unique for already cached SVGs with better performance\n                    svgString = makeIdsUniqueCached(uniqueIdsSvgString);\n                  }\n                }\n\n                svgElem = svgElem || buildSvgElement(svgString, false);\n\n                inject(imgElem, svgElem, absUrl, options);\n              }\n              onFinish();\n            };\n\n            if (typeof svgLoad != _UNDEFINED_) {\n              // Value for url exists in cache\n              if (svgLoad.isCallbackQueue) {\n                // Same url has been cached, but value has not been loaded yet, so add to callbacks\n                svgLoad.push(handleLoadValue);\n              } else {\n                handleLoadValue(svgLoad);\n              }\n              return;\n            } else {\n              var svgLoad = [];\n              // set property isCallbackQueue to Array to differentiate from array with cached loaded values\n              svgLoad.isCallbackQueue = true;\n              svgLoadCache[absUrl] = svgLoad;\n            }\n          }\n\n          // Load the SVG because it is not cached or caching is disabled\n          loadSvg(absUrl, function(svgXml, svgString) {\n            // Use the XML from the XHR request if it is an instance of Document. Otherwise\n            // (for example of IE9), create the svg document from the svg string.\n            var svgElem = svgXml instanceof Document ? svgXml.documentElement : buildSvgElement(svgString, true);\n\n            var afterLoad = options.afterLoad;\n            if (afterLoad) {\n              // Invoke afterLoad hook which may modify the SVG element. After load may also return a new\n              // svg element or svg string\n              var svgElemOrSvgString = afterLoad(svgElem, svgString) || svgElem;\n              if (svgElemOrSvgString) {\n                // Update svgElem and svgString because of modifications to the SVG element or SVG string in\n                // the afterLoad hook, so the modified SVG is also used for all later cached injections\n                var isString = typeof svgElemOrSvgString == 'string';\n                svgString = isString ? svgElemOrSvgString : svgElemToSvgString(svgElem);\n                svgElem = isString ? buildSvgElement(svgElemOrSvgString, true) : svgElemOrSvgString;\n              }\n            }\n\n            if (svgElem instanceof SVGElement) {\n              var hasUniqueIds = NULL;\n              if (makeIdsUniqueOption) {\n                hasUniqueIds = makeIdsUnique(svgElem, false);\n              }\n\n              if (useCacheOption) {\n                var uniqueIdsSvgString = hasUniqueIds && svgElemToSvgString(svgElem);\n                // set an array with three entries to the load cache\n                setSvgLoadCacheValue([hasUniqueIds, svgString, uniqueIdsSvgString]);\n              }\n\n              inject(imgElem, svgElem, absUrl, options);\n            } else {\n              svgInvalid(imgElem, options);\n              setSvgLoadCacheValue(SVG_INVALID);\n            }\n            onFinish();\n          }, function() {\n            loadFail(imgElem, options);\n            setSvgLoadCacheValue(LOAD_FAIL);\n            onFinish();\n          });\n        } else {\n          if (Array.isArray(svgInjectAttributeValue)) {\n            // svgInjectAttributeValue is an array. Injection is not complete so register callback\n            svgInjectAttributeValue.push(callback);\n          } else {\n            callback();\n          }\n        }\n      } else {\n        imgNotSet();\n      }\n    }\n\n\n    /**\n     * Sets the default [options](#options) for SVGInject.\n     *\n     * @param {Object} [options] - default [options](#options) for an injection.\n     */\n    SVGInject.setOptions = function(options) {\n      defaultOptions = mergeOptions(defaultOptions, options);\n    };\n\n\n    // Create a new instance of SVGInject\n    SVGInject.create = createSVGInject;\n\n\n    /**\n     * Used in onerror Event of an `<img>` element to handle cases when the loading the original src fails\n     * (for example if file is not found or if the browser does not support SVG). This triggers a call to the\n     * options onFail hook if available. The optional second parameter will be set as the new src attribute\n     * for the img element.\n     *\n     * @param {HTMLImageElement} img - an img element\n     * @param {String} [fallbackSrc] - optional parameter fallback src\n     */\n    SVGInject.err = function(img, fallbackSrc) {\n      if (img) {\n        if (img[__SVGINJECT] != FAIL) {\n          removeEventListeners(img);\n\n          if (!IS_SVG_SUPPORTED) {\n            svgNotSupported(img, defaultOptions);\n          } else {\n            removeOnLoadAttribute(img);\n            loadFail(img, defaultOptions);\n          }\n          if (fallbackSrc) {\n            removeOnLoadAttribute(img);\n            img.src = fallbackSrc;\n          }\n        }\n      } else {\n        imgNotSet();\n      }\n    };\n\n    window[globalName] = SVGInject;\n\n    return SVGInject;\n  }\n\n  var SVGInjectInstance = createSVGInject('SVGInject');\n\n  if (typeof module == 'object' && typeof module.exports == 'object') {\n    module.exports = SVGInjectInstance;\n  }\n})(window, document);","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","const bodyScrollLock = require('body-scroll-lock');\r\nbodyScrollLock.disableBodyScroll(window);\r\n\r\nconst SVGInject = require('@iconfu/svg-inject');\r\nconst debounce = require('lodash.debounce');\r\n\r\ndocument.querySelectorAll('img.inject-svg').forEach(img => SVGInject(img));\r\n\r\nconst main = document.querySelector('#main'),\r\n   mainCopy = document.querySelector('#main-copy'); \r\n   \r\nlet tl,\r\n   lastTouchY;\r\n\r\nwindow.onload = () => {\r\n   TweenLite.set(document.body, {scrollTo: 0});\r\n};\r\n\r\nwindow.addEventListener('touchstart', e => lastTouchY = e.touches[0].clientY);\r\n\r\nwindow.addEventListener('touchmove', debounce(e => {\r\n   let distToMove = 60;\r\n\r\n   e.touches[0].clientY - distToMove > lastTouchY && scrollUp();\r\n   e.touches[0].clientY + distToMove < lastTouchY && scrollDown();\r\n   lastTouchY = e.touches[0].clientY;\r\n},\r\n   30, {\r\n      leading: true,\r\n      maxWait: 30\r\n   }\r\n));\r\n\r\nfunction scrollDown() {\r\n   if (typeof tl != 'undefined' && tl.isActive()) return;\r\n\r\n   tl = new TimelineLite();\r\n   tl.set(document.body, {\r\n         scrollTo: 0\r\n      })\r\n      .to(document.body, .5, {\r\n         ease: Power2.easeInOut,\r\n         scrollTo: mainCopy.offsetTop\r\n      })\r\n      .set(document.body, {\r\n         scrollTo: 0\r\n      });\r\n}\r\n\r\nfunction scrollUp() {\r\n   if (typeof tl != 'undefined' && tl.isActive()) return;\r\n\r\n   tl = new TimelineLite();\r\n   tl.set(document.body, {\r\n         scrollTo: mainCopy.offsetTop\r\n      })\r\n      .to(document.body, .5, {\r\n         ease: Power2.easeInOut,\r\n         scrollTo: 0\r\n      });\r\n}\r\n\r\n"]}